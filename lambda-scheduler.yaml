---
AWSTemplateFormatVersion: '2010-09-09'
Description: A Lambda function for scheduling later Lambda function executions.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Configuration
      Parameters:
      - MetricAlarmEmailAddress
      - LogRetentionDays
    ParameterLabels:
      LogRetentionDays:
        default: Log Retention (days)
      MetricAlarmEmailAddress:
        default: Alarm E-mail Address
Parameters:
  LogRetentionDays:
    Type: String
    Default: '14'
    AllowedValues:
    - ''
    - '1'
    - '3'
    - '5'
    - '7'
    - '14'
    - '30'
    - '60'
    - '90'
    - '120'
    - '150'
    - '180'
    - '365'
    - '400'
    - '545'
    - '731'
    - '1827'
    - '3653'
  MetricAlarmEmailAddress:
    Type: String
    Description: In case of errors. Leave blank to disable.
    Default: ''
Mappings:
  StaticVariables:
    Main:
      StageName: v1
Conditions:
  IncludeMetricAlarmsCondition:
    Fn::Not:
    - Fn::Equals:
      - Ref: MetricAlarmEmailAddress
      - ''
Resources:
  
  #
  #   Invocation Queuer
  #   
  #   This is the function that receives requests to have Lambda functions 
  #   executed at a later time.
  #
  
  InvocationQueuerFunction:
    Type: AWS::Lambda::Function
    Metadata:
      SharedBucket:
        Ref: SharedBucket
    Properties:
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - InvocationQueuerFunctionRole
        - Arn
      Code:
        S3Bucket:
          Ref: SharedBucket
        S3Key: lambda/InvocationQueuerFunction.zip
      Runtime: python2.7
      Timeout: '300'
  InvocationQueuerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  InvocationQueuerFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InvocationQueuerFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${InvocationQueuerFunction}:log-stream:*
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/queued/*
        - Effect: Allow
          Action:
          - iam:GetRolePolicy
          Resource:
            Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${InvocationQueuerFunctionRole}
        - Effect: Allow
          Action:
          - cloudformation:DescribeStackResource
          Resource:
            Fn::Sub: ${AWS::StackId}
        - Effect: Allow
          Action:
          - lambda:GetFunction
          - lambda:GetPolicy
          Resource:
            Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
      Roles:
      - Ref: InvocationQueuerFunctionRole
  InvocationQueuerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${InvocationQueuerFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  
  #
  #   Stack Setup Cleanup
  #   
  #   This function performs basic setup and cleanup functionality when the 
  #   stack is created / deleted.
  #   
  #   On create:
  #     - Nothing yet
  #   On delete:
  #     - Clear out S3 bucket
  #
  
  StackSetupCleanupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Queues up Lambda function invocations for later execution.
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - StackSetupCleanupFunctionRole
        - Arn
      Code:
        S3Bucket:
          Ref: SharedBucket
        S3Key: lambda/StackSetupCleanupFunction.zip
      Runtime: python2.7
      Timeout: '300'
  StackSetupCleanupFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  StackSetupCleanupFunctionRoleActions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StackSetupCleanupFunctionRoleActions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${StackSetupCleanupFunction}:log-stream:*
        - Effect: Allow
          Action:
          - s3:DeleteObject
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}/*
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${SharedBucket}
      Roles:
      - Ref: StackSetupCleanupFunctionRole
  StackSetupCleanupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StackSetupCleanupFunction}
      RetentionInDays:
        Ref: LogRetentionDays
  StackSetupCleanupInvocation:
    Type: Custom::StackSetupCleanupInvocation
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - StackSetupCleanupFunction
        - Arn
      SharedBucket:
        Ref: SharedBucket
    DependsOn:
    - StackSetupCleanupFunctionLogGroup
    - StackSetupCleanupFunctionRoleActions
  
  SharedBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
        
Outputs:
  WordGeneratorApiEndPoint:
    Value: test
